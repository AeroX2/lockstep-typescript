!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e,n){parcelRequire=function(e,r,i,o){var s="function"==typeof parcelRequire&&parcelRequire;function a(t,i){if(!r[t]){if(!e[t]){var o="function"==typeof parcelRequire&&parcelRequire;if(!i&&o)return o(t,!0);if(s)return s(t,!0);if("string"==typeof t)return n(1)(t);var u=new Error("Cannot find module '"+t+"'");throw u.code="MODULE_NOT_FOUND",u}h.resolve=function(n){return e[t][1][n]||n},h.cache={};var c=r[t]=new a.Module(t);e[t][0].call(c.exports,h,c,c.exports,this)}return r[t].exports;function h(t){return a(h.resolve(t))}}a.isParcelRequire=!0,a.Module=function(t){this.id=t,this.bundle=a,this.exports={}},a.modules=e,a.cache=r,a.parent=s,a.register=function(t,n){e[t]=[function(t,e){e.exports=n},{}]};for(var u=0;u<i.length;u++)a(i[u]);if(i.length){var c=a(i[i.length-1]);t.exports=c}return a}({vHo1:[function(t,e,n){var r={};r.useBlobBuilder=function(){try{return new Blob([]),!1}catch(t){return!0}}(),r.useArrayBufferView=!r.useBlobBuilder&&function(){try{return 0===new Blob([new Uint8Array([])]).size}catch(t){return!0}}(),e.exports.binaryFeatures=r;var i=e.exports.BlobBuilder;function o(){this._pieces=[],this._parts=[]}"undefined"!=typeof window&&(i=e.exports.BlobBuilder=window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder||window.BlobBuilder),o.prototype.append=function(t){"number"==typeof t?this._pieces.push(t):(this.flush(),this._parts.push(t))},o.prototype.flush=function(){if(this._pieces.length>0){var t=new Uint8Array(this._pieces);r.useArrayBufferView||(t=t.buffer),this._parts.push(t),this._pieces=[]}},o.prototype.getBuffer=function(){if(this.flush(),r.useBlobBuilder){for(var t=new i,e=0,n=this._parts.length;e<n;e++)t.append(this._parts[e]);return t.getBlob()}return new Blob(this._parts)},e.exports.BufferBuilder=o},{}],lHOc:[function(t,e,n){var r=t("./bufferbuilder").BufferBuilder,i=t("./bufferbuilder").binaryFeatures,o={unpack:function(t){return new s(t).unpack()},pack:function(t){var e=new a;return e.pack(t),e.getBuffer()}};function s(t){this.index=0,this.dataBuffer=t,this.dataView=new Uint8Array(this.dataBuffer),this.length=this.dataBuffer.byteLength}function a(){this.bufferBuilder=new r}function u(t){var e=t.charCodeAt(0);return e<=2047?"00":e<=65535?"000":e<=2097151?"0000":e<=67108863?"00000":"000000"}e.exports=o,s.prototype.unpack=function(){var t,e=this.unpack_uint8();if(e<128)return e;if((224^e)<32)return(224^e)-32;if((t=160^e)<=15)return this.unpack_raw(t);if((t=176^e)<=15)return this.unpack_string(t);if((t=144^e)<=15)return this.unpack_array(t);if((t=128^e)<=15)return this.unpack_map(t);switch(e){case 192:return null;case 193:return;case 194:return!1;case 195:return!0;case 202:return this.unpack_float();case 203:return this.unpack_double();case 204:return this.unpack_uint8();case 205:return this.unpack_uint16();case 206:return this.unpack_uint32();case 207:return this.unpack_uint64();case 208:return this.unpack_int8();case 209:return this.unpack_int16();case 210:return this.unpack_int32();case 211:return this.unpack_int64();case 212:case 213:case 214:case 215:return;case 216:return t=this.unpack_uint16(),this.unpack_string(t);case 217:return t=this.unpack_uint32(),this.unpack_string(t);case 218:return t=this.unpack_uint16(),this.unpack_raw(t);case 219:return t=this.unpack_uint32(),this.unpack_raw(t);case 220:return t=this.unpack_uint16(),this.unpack_array(t);case 221:return t=this.unpack_uint32(),this.unpack_array(t);case 222:return t=this.unpack_uint16(),this.unpack_map(t);case 223:return t=this.unpack_uint32(),this.unpack_map(t)}},s.prototype.unpack_uint8=function(){var t=255&this.dataView[this.index];return this.index++,t},s.prototype.unpack_uint16=function(){var t=this.read(2),e=256*(255&t[0])+(255&t[1]);return this.index+=2,e},s.prototype.unpack_uint32=function(){var t=this.read(4),e=256*(256*(256*t[0]+t[1])+t[2])+t[3];return this.index+=4,e},s.prototype.unpack_uint64=function(){var t=this.read(8),e=256*(256*(256*(256*(256*(256*(256*t[0]+t[1])+t[2])+t[3])+t[4])+t[5])+t[6])+t[7];return this.index+=8,e},s.prototype.unpack_int8=function(){var t=this.unpack_uint8();return t<128?t:t-256},s.prototype.unpack_int16=function(){var t=this.unpack_uint16();return t<32768?t:t-65536},s.prototype.unpack_int32=function(){var t=this.unpack_uint32();return t<Math.pow(2,31)?t:t-Math.pow(2,32)},s.prototype.unpack_int64=function(){var t=this.unpack_uint64();return t<Math.pow(2,63)?t:t-Math.pow(2,64)},s.prototype.unpack_raw=function(t){if(this.length<this.index+t)throw new Error("BinaryPackFailure: index is out of range "+this.index+" "+t+" "+this.length);var e=this.dataBuffer.slice(this.index,this.index+t);return this.index+=t,e},s.prototype.unpack_string=function(t){for(var e,n,r=this.read(t),i=0,o="";i<t;)(e=r[i])<128?(o+=String.fromCharCode(e),i++):(192^e)<32?(n=(192^e)<<6|63&r[i+1],o+=String.fromCharCode(n),i+=2):(n=(15&e)<<12|(63&r[i+1])<<6|63&r[i+2],o+=String.fromCharCode(n),i+=3);return this.index+=t,o},s.prototype.unpack_array=function(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=this.unpack();return e},s.prototype.unpack_map=function(t){for(var e={},n=0;n<t;n++){var r=this.unpack(),i=this.unpack();e[r]=i}return e},s.prototype.unpack_float=function(){var t=this.unpack_uint32(),e=(t>>23&255)-127;return(0==t>>31?1:-1)*(8388607&t|8388608)*Math.pow(2,e-23)},s.prototype.unpack_double=function(){var t=this.unpack_uint32(),e=this.unpack_uint32(),n=(t>>20&2047)-1023;return(0==t>>31?1:-1)*((1048575&t|1048576)*Math.pow(2,n-20)+e*Math.pow(2,n-52))},s.prototype.read=function(t){var e=this.index;if(e+t<=this.length)return this.dataView.subarray(e,e+t);throw new Error("BinaryPackFailure: read index out of range")},a.prototype.getBuffer=function(){return this.bufferBuilder.getBuffer()},a.prototype.pack=function(t){var e=typeof t;if("string"==e)this.pack_string(t);else if("number"==e)Math.floor(t)===t?this.pack_integer(t):this.pack_double(t);else if("boolean"==e)!0===t?this.bufferBuilder.append(195):!1===t&&this.bufferBuilder.append(194);else if("undefined"==e)this.bufferBuilder.append(192);else{if("object"!=e)throw new Error('Type "'+e+'" not yet supported');if(null===t)this.bufferBuilder.append(192);else{var n=t.constructor;if(n==Array)this.pack_array(t);else if(n==Blob||n==File)this.pack_bin(t);else if(n==ArrayBuffer)i.useArrayBufferView?this.pack_bin(new Uint8Array(t)):this.pack_bin(t);else if("BYTES_PER_ELEMENT"in t)i.useArrayBufferView?this.pack_bin(new Uint8Array(t.buffer)):this.pack_bin(t.buffer);else if(n==Object)this.pack_object(t);else if(n==Date)this.pack_string(t.toString());else{if("function"!=typeof t.toBinaryPack)throw new Error('Type "'+n.toString()+'" not yet supported');this.bufferBuilder.append(t.toBinaryPack())}}}this.bufferBuilder.flush()},a.prototype.pack_bin=function(t){var e=t.length||t.byteLength||t.size;if(e<=15)this.pack_uint8(160+e);else if(e<=65535)this.bufferBuilder.append(218),this.pack_uint16(e);else{if(!(e<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(219),this.pack_uint32(e)}this.bufferBuilder.append(t)},a.prototype.pack_string=function(t){var e=function(t){return t.length>600?new Blob([t]).size:t.replace(/[^\u0000-\u007F]/g,u).length}(t);if(e<=15)this.pack_uint8(176+e);else if(e<=65535)this.bufferBuilder.append(216),this.pack_uint16(e);else{if(!(e<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(217),this.pack_uint32(e)}this.bufferBuilder.append(t)},a.prototype.pack_array=function(t){var e=t.length;if(e<=15)this.pack_uint8(144+e);else if(e<=65535)this.bufferBuilder.append(220),this.pack_uint16(e);else{if(!(e<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(221),this.pack_uint32(e)}for(var n=0;n<e;n++)this.pack(t[n])},a.prototype.pack_integer=function(t){if(-32<=t&&t<=127)this.bufferBuilder.append(255&t);else if(0<=t&&t<=255)this.bufferBuilder.append(204),this.pack_uint8(t);else if(-128<=t&&t<=127)this.bufferBuilder.append(208),this.pack_int8(t);else if(0<=t&&t<=65535)this.bufferBuilder.append(205),this.pack_uint16(t);else if(-32768<=t&&t<=32767)this.bufferBuilder.append(209),this.pack_int16(t);else if(0<=t&&t<=4294967295)this.bufferBuilder.append(206),this.pack_uint32(t);else if(-2147483648<=t&&t<=2147483647)this.bufferBuilder.append(210),this.pack_int32(t);else if(-0x8000000000000000<=t&&t<=0x8000000000000000)this.bufferBuilder.append(211),this.pack_int64(t);else{if(!(0<=t&&t<=0x10000000000000000))throw new Error("Invalid integer");this.bufferBuilder.append(207),this.pack_uint64(t)}},a.prototype.pack_double=function(t){var e=0;t<0&&(e=1,t=-t);var n=Math.floor(Math.log(t)/Math.LN2),r=t/Math.pow(2,n)-1,i=Math.floor(r*Math.pow(2,52)),o=Math.pow(2,32),s=e<<31|n+1023<<20|i/o&1048575,a=i%o;this.bufferBuilder.append(203),this.pack_int32(s),this.pack_int32(a)},a.prototype.pack_object=function(t){var e=Object.keys(t).length;if(e<=15)this.pack_uint8(128+e);else if(e<=65535)this.bufferBuilder.append(222),this.pack_uint16(e);else{if(!(e<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(223),this.pack_uint32(e)}for(var n in t)t.hasOwnProperty(n)&&(this.pack(n),this.pack(t[n]))},a.prototype.pack_uint8=function(t){this.bufferBuilder.append(t)},a.prototype.pack_uint16=function(t){this.bufferBuilder.append(t>>8),this.bufferBuilder.append(255&t)},a.prototype.pack_uint32=function(t){var e=4294967295&t;this.bufferBuilder.append((4278190080&e)>>>24),this.bufferBuilder.append((16711680&e)>>>16),this.bufferBuilder.append((65280&e)>>>8),this.bufferBuilder.append(255&e)},a.prototype.pack_uint64=function(t){var e=t/Math.pow(2,32),n=t%Math.pow(2,32);this.bufferBuilder.append((4278190080&e)>>>24),this.bufferBuilder.append((16711680&e)>>>16),this.bufferBuilder.append((65280&e)>>>8),this.bufferBuilder.append(255&e),this.bufferBuilder.append((4278190080&n)>>>24),this.bufferBuilder.append((16711680&n)>>>16),this.bufferBuilder.append((65280&n)>>>8),this.bufferBuilder.append(255&n)},a.prototype.pack_int8=function(t){this.bufferBuilder.append(255&t)},a.prototype.pack_int16=function(t){this.bufferBuilder.append((65280&t)>>8),this.bufferBuilder.append(255&t)},a.prototype.pack_int32=function(t){this.bufferBuilder.append(t>>>24&255),this.bufferBuilder.append((16711680&t)>>>16),this.bufferBuilder.append((65280&t)>>>8),this.bufferBuilder.append(255&t)},a.prototype.pack_int64=function(t){var e=Math.floor(t/Math.pow(2,32)),n=t%Math.pow(2,32);this.bufferBuilder.append((4278190080&e)>>>24),this.bufferBuilder.append((16711680&e)>>>16),this.bufferBuilder.append((65280&e)>>>8),this.bufferBuilder.append(255&e),this.bufferBuilder.append((4278190080&n)>>>24),this.bufferBuilder.append((16711680&n)>>>16),this.bufferBuilder.append((65280&n)>>>8),this.bufferBuilder.append(255&n)}},{"./bufferbuilder":"vHo1"}],sXtV:[function(t,e,n){"use strict";n.__esModule=!0,n.RTCSessionDescription=window.RTCSessionDescription||window.mozRTCSessionDescription,n.RTCPeerConnection=window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection,n.RTCIceCandidate=window.RTCIceCandidate||window.mozRTCIceCandidate},{}],BHXf:[function(t,e,n){arguments[3],arguments[3];var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};n.__esModule=!0;var i={iceServers:[{urls:"stun:stun.l.google.com:19302"}]},o=1,s=r(t("js-binarypack")),a=t("./adapter");n.util={noop:function(){},CLOUD_HOST:"0.peerjs.com",CLOUD_PORT:443,chunkedBrowsers:{Chrome:1},chunkedMTU:16300,logLevel:0,setLogLevel:function(t){var e=parseInt(t,10);isNaN(parseInt(t,10))?n.util.logLevel=t?3:0:n.util.logLevel=e,n.util.log=n.util.warn=n.util.error=n.util.noop,n.util.logLevel>0&&(n.util.error=n.util._printWith("ERROR")),n.util.logLevel>1&&(n.util.warn=n.util._printWith("WARNING")),n.util.logLevel>2&&(n.util.log=n.util._print)},setLogFunction:function(t){t.constructor!==Function?n.util.warn("The log function you passed in is not a function. Defaulting to regular logs."):n.util._print=t},_printWith:function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t),n.util._print.apply(n.util,e)}},_print:function(){var t=!1,e=Array.prototype.slice.call(arguments);e.unshift("PeerJS: ");for(var n=0,r=e.length;n<r;n++)e[n]instanceof Error&&(e[n]="("+e[n].name+") "+e[n].message,t=!0);t?console.error.apply(console,e):console.log.apply(console,e)},defaultConfig:i,browser:window.mozRTCPeerConnection?"Firefox":window.webkitRTCPeerConnection?"Chrome":window.RTCPeerConnection?"Supported":"Unsupported",supports:function(){if(void 0===a.RTCPeerConnection)return{};var t,e,n=!0,r=!0,o=!1,s=!1,u=!!window.webkitRTCPeerConnection;try{t=new a.RTCPeerConnection(i,{optional:[{RtpDataChannels:!0}]})}catch(t){n=!1,r=!1}if(n)try{e=t.createDataChannel("_PEERJSTEST")}catch(t){n=!1}if(n){try{e.binaryType="blob",o=!0}catch(t){}var c=new a.RTCPeerConnection(i,{});try{s=c.createDataChannel("_PEERJSRELIABLETEST",{}).reliable}catch(t){}c.close()}return r&&(r=!!t.addStream),t&&t.close(),{audioVideo:r,data:n,binaryBlob:o,binary:s,reliable:s,sctp:s,onnegotiationneeded:u}}(),validateId:function(t){return!t||/^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.exec(t)},validateKey:function(t){return!t||/^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.exec(t)},debug:!1,inherits:function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})},extend:function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},pack:s.default.pack,unpack:s.default.unpack,log:function(){if(n.util.debug){var t=!1,e=Array.prototype.slice.call(arguments);e.unshift("PeerJS: ");for(var r=0,i=e.length;r<i;r++)e[r]instanceof Error&&(e[r]="("+e[r].name+") "+e[r].message,t=!0);t?console.error.apply(console,e):console.log.apply(console,e)}},setZeroTimeout:function(t){var e=[],n="zero-timeout-message";function r(r){r.source==t&&r.data==n&&(r.stopPropagation&&r.stopPropagation(),e.length&&e.shift()())}return t.addEventListener?t.addEventListener("message",r,!0):t.attachEvent&&t.attachEvent("onmessage",r),function(r){e.push(r),t.postMessage(n,"*")}}(window),chunk:function(t){for(var e,r=[],i=t.size,s=e=0,a=Math.ceil(i/n.util.chunkedMTU);s<i;){var u=Math.min(i,s+n.util.chunkedMTU),c=t.slice(s,u),h={__peerData:o,n:e,data:c,total:a};r.push(h),s=u,e+=1}return o+=1,r},blobToArrayBuffer:function(t,e){var n=new FileReader;n.onload=function(t){e(t.target.result)},n.readAsArrayBuffer(t)},blobToBinaryString:function(t,e){var n=new FileReader;n.onload=function(t){e(t.target.result)},n.readAsBinaryString(t)},binaryStringToArrayBuffer:function(t){for(var e=new Uint8Array(t.length),n=0;n<t.length;n++)e[n]=255&t.charCodeAt(n);return e.buffer},randomToken:function(){return Math.random().toString(36).substr(2)},isSecure:function(){return"https:"===location.protocol}}},{"js-binarypack":"lHOc","./adapter":"sXtV"}],"2JJl":[function(t,e,n){"use strict";function r(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function i(){}i.prototype._events=void 0,i.prototype.listeners=function(t){if(!this._events||!this._events[t])return[];if(this._events[t].fn)return[this._events[t].fn];for(var e=0,n=this._events[t].length,r=new Array(n);e<n;e++)r[e]=this._events[t][e].fn;return r},i.prototype.emit=function(t,e,n,r,i,o){if(!this._events||!this._events[t])return!1;var s,a,u=this._events[t],c=arguments.length;if("function"==typeof u.fn){switch(u.once&&this.removeListener(t,u.fn,!0),c){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,e),!0;case 3:return u.fn.call(u.context,e,n),!0;case 4:return u.fn.call(u.context,e,n,r),!0;case 5:return u.fn.call(u.context,e,n,r,i),!0;case 6:return u.fn.call(u.context,e,n,r,i,o),!0}for(a=1,s=new Array(c-1);a<c;a++)s[a-1]=arguments[a];u.fn.apply(u.context,s)}else{var h,f=u.length;for(a=0;a<f;a++)switch(u[a].once&&this.removeListener(t,u[a].fn,!0),c){case 1:u[a].fn.call(u[a].context);break;case 2:u[a].fn.call(u[a].context,e);break;case 3:u[a].fn.call(u[a].context,e,n);break;default:if(!s)for(h=1,s=new Array(c-1);h<c;h++)s[h-1]=arguments[h];u[a].fn.apply(u[a].context,s)}}return!0},i.prototype.on=function(t,e,n){var i=new r(e,n||this);return this._events||(this._events={}),this._events[t]?this._events[t].fn?this._events[t]=[this._events[t],i]:this._events[t].push(i):this._events[t]=i,this},i.prototype.once=function(t,e,n){var i=new r(e,n||this,!0);return this._events||(this._events={}),this._events[t]?this._events[t].fn?this._events[t]=[this._events[t],i]:this._events[t].push(i):this._events[t]=i,this},i.prototype.removeListener=function(t,e,n){if(!this._events||!this._events[t])return this;var r=this._events[t],i=[];if(e&&(r.fn&&(r.fn!==e||n&&!r.once)&&i.push(r),!r.fn))for(var o=0,s=r.length;o<s;o++)(r[o].fn!==e||n&&!r[o].once)&&i.push(r[o]);return i.length?this._events[t]=1===i.length?i[0]:i:delete this._events[t],this},i.prototype.removeAllListeners=function(t){return this._events?(t?delete this._events[t]:this._events={},this):this},i.prototype.off=i.prototype.removeListener,i.prototype.addListener=i.prototype.on,i.prototype.setMaxListeners=function(){return this},i.EventEmitter=i,i.EventEmitter2=i,i.EventEmitter3=i,e.exports=i},{}],wJlv:[function(t,e,n){"use strict";n.__esModule=!0;var r=t("./util"),i=t("eventemitter3");function o(t,e,n,r,s,a){if(!(this instanceof o))return new o(t,e,n,r,s,a);a=a||n,i.EventEmitter.call(this),this.disconnected=!1,this._queue=[];var u=t?"https://":"http://",c=t?"wss://":"ws://";this._httpUrl=u+e+":"+n+r+s,this._wsUrl=c+e+":"+a+r+"peerjs?key="+s}n.Socket=o,r.util.inherits(o,i.EventEmitter),o.prototype.start=function(t,e){this.id=t,this._httpUrl+="/"+t+"/"+e,this._wsUrl+="&id="+t+"&token="+e,this._startXhrStream(),this._startWebSocket()},o.prototype._startWebSocket=function(t){var e=this;this._socket||(this._socket=new WebSocket(this._wsUrl),this._socket.onmessage=function(t){try{var n=JSON.parse(t.data)}catch(e){return void r.util.log("Invalid server message",t.data)}e.emit("message",n)},this._socket.onclose=function(t){r.util.log("Socket closed."),e.disconnected=!0,e.emit("disconnected")},this._socket.onopen=function(){e._timeout&&(clearTimeout(e._timeout),setTimeout(function(){e._http.abort(),e._http=null},5e3)),e._sendQueuedMessages(),r.util.log("Socket open")})},o.prototype._startXhrStream=function(t){try{var e=this;this._http=new XMLHttpRequest,this._http._index=1,this._http._streamIndex=t||0,this._http.open("post",this._httpUrl+"/id?i="+this._http._streamIndex,!0),this._http.onerror=function(){clearTimeout(e._timeout),e.emit("disconnected")},this._http.onreadystatechange=function(){2==this.readyState&&this.old?(this.old.abort(),delete this.old):this.readyState>2&&200===this.status&&this.responseText&&e._handleStream(this)},this._http.send(null),this._setHTTPTimeout()}catch(t){r.util.log("XMLHttpRequest not available; defaulting to WebSockets")}},o.prototype._handleStream=function(t){var e=t.responseText.split("\n");if(t._buffer)for(;t._buffer.length>0;){var n=t._buffer.shift(),i=e[n];try{i=JSON.parse(i)}catch(e){t._buffer.shift(n);break}this.emit("message",i)}var o=e[t._index];if(o)if(t._index+=1,t._index===e.length)t._buffer||(t._buffer=[]),t._buffer.push(t._index-1);else{try{o=JSON.parse(o)}catch(t){return void r.util.log("Invalid server message",o)}this.emit("message",o)}},o.prototype._setHTTPTimeout=function(){var t=this;this._timeout=setTimeout(function(){var e=t._http;t._wsOpen()?e.abort():(t._startXhrStream(e._streamIndex+1),t._http.old=e)},25e3)},o.prototype._wsOpen=function(){return this._socket&&1==this._socket.readyState},o.prototype._sendQueuedMessages=function(){for(var t=0,e=this._queue.length;t<e;t+=1)this.send(this._queue[t])},o.prototype.send=function(t){if(!this.disconnected)if(this.id)if(t.type){var e=JSON.stringify(t);if(this._wsOpen())this._socket.send(e);else{var n=new XMLHttpRequest,r=this._httpUrl+"/"+t.type.toLowerCase();n.open("post",r,!0),n.setRequestHeader("Content-Type","application/json"),n.send(e)}}else this.emit("error","Invalid message");else this._queue.push(t)},o.prototype.close=function(){!this.disconnected&&this._wsOpen()&&(this._socket.close(),this.disconnected=!0)}},{"./util":"BHXf",eventemitter3:"2JJl"}],HCdX:[function(t,e,n){"use strict";n.__esModule=!0;var r=t("./util"),i=t("./adapter");function o(t,e){"addTrack"in e?t.getTracks().forEach(function(n){e.addTrack(n,t)}):"addStream"in e&&e.addStream(t)}n.Negotiator={pcs:{data:{},media:{}},queue:[]},n.Negotiator._idPrefix="pc_",n.Negotiator.startConnection=function(t,e){var i=n.Negotiator._getPeerConnection(t,e);if(t.pc=t.peerConnection=i,"media"===t.type&&e._stream&&o(e._stream,i),e.originator){if("data"===t.type){var s={};r.util.supports.sctp||(s={reliable:e.reliable});var a=i.createDataChannel(t.label,s);t.initialize(a)}n.Negotiator._makeOffer(t)}else n.Negotiator.handleSDP("OFFER",t,e.sdp)},n.Negotiator._getPeerConnection=function(t,e){var i;return n.Negotiator.pcs[t.type]||r.util.error(t.type+" is not a valid connection type. Maybe you overrode the `type` property somewhere."),n.Negotiator.pcs[t.type][t.peer]||(n.Negotiator.pcs[t.type][t.peer]={}),n.Negotiator.pcs[t.type][t.peer],e.pc&&(i=n.Negotiator.pcs[t.type][t.peer][e.pc]),i&&"stable"===i.signalingState||(i=n.Negotiator._startPeerConnection(t)),i},n.Negotiator._startPeerConnection=function(t){r.util.log("Creating RTCPeerConnection.");var e=n.Negotiator._idPrefix+r.util.randomToken(),o={};"data"!==t.type||r.util.supports.sctp?"media"===t.type&&(o={optional:[{DtlsSrtpKeyAgreement:!0}]}):o={optional:[{RtpDataChannels:!0}]};var s=new i.RTCPeerConnection(t.provider.options.config,o);return n.Negotiator.pcs[t.type][t.peer][e]=s,n.Negotiator._setupListeners(t,s,e),s},n.Negotiator._setupListeners=function(t,e,n){var i=t.peer,s=t.id,a=t.provider;r.util.log("Listening for ICE candidates."),e.onicecandidate=function(e){e.candidate&&(r.util.log("Received ICE candidates for:",t.peer),a.socket.send({type:"CANDIDATE",payload:{candidate:e.candidate,type:t.type,connectionId:t.id},dst:i}))},e.oniceconnectionstatechange=function(){switch(e.iceConnectionState){case"failed":r.util.log("iceConnectionState is disconnected, closing connections to "+i),t.emit("error",new Error("Negotiation of connection to "+i+" failed.")),t.close();break;case"disconnected":r.util.log("iceConnectionState is disconnected, closing connections to "+i);break;case"completed":e.onicecandidate=r.util.noop}},e.onicechange=e.oniceconnectionstatechange,r.util.log("Listening for data channel"),e.ondatachannel=function(t){r.util.log("Received data channel");var e=t.channel;a.getConnection(i,s).initialize(e)},r.util.log("Listening for remote stream"),e.ontrack=function(t){r.util.log("Received remote stream");var e=t.streams[0],n=a.getConnection(i,s);"media"===n.type&&o(e,n)}},n.Negotiator.cleanup=function(t){r.util.log("Cleaning up PeerConnection to "+t.peer);var e=t.pc;e&&(e.readyState&&"closed"!==e.readyState||"closed"!==e.signalingState)&&(e.close(),t.pc=null)},n.Negotiator._makeOffer=function(t){var e=t.pc,n=function(n){r.util.log("Created offer."),!r.util.supports.sctp&&"data"===t.type&&t.reliable&&(n.sdp=Reliable.higherBandwidthSDP(n.sdp)),e.setLocalDescription(n).then(function(){return r.util.log("Set localDescription: offer","for:",t.peer),void t.provider.socket.send({type:"OFFER",payload:{sdp:n,type:t.type,label:t.label,connectionId:t.id,reliable:t.reliable,serialization:t.serialization,metadata:t.metadata,browser:r.util.browser},dst:t.peer})}).catch(function(e){return function(e){"OperationError: Failed to set local offer sdp: Called in wrong state: kHaveRemoteOffer"!=e&&(t.provider.emitError("webrtc",e),r.util.log("Failed to setLocalDescription, ",e))}(e)})};e.createOffer(t.options.constraints).then(function(t){return n(t)}).catch(function(e){return function(e){t.provider.emitError("webrtc",e),r.util.log("Failed to createOffer, ",e)}(e)})},n.Negotiator._makeAnswer=function(t){var e=t.pc,n=function(n){r.util.log("Created answer."),!r.util.supports.sctp&&"data"===t.type&&t.reliable&&(n.sdp=Reliable.higherBandwidthSDP(n.sdp)),e.setLocalDescription(n).then(function(){return r.util.log("Set localDescription: answer","for:",t.peer),void t.provider.socket.send({type:"ANSWER",payload:{sdp:n,type:t.type,connectionId:t.id,browser:r.util.browser},dst:t.peer})}).catch(function(e){t.provider.emitError("webrtc",e),r.util.log("Failed to setLocalDescription, ",e)})};e.createAnswer().then(function(t){return n(t)}).catch(function(e){t.provider.emitError("webrtc",e),r.util.log("Failed to create answer, ",e)})},n.Negotiator.handleSDP=function(t,e,o){o=new i.RTCSessionDescription(o);var s=e.pc;r.util.log("Setting remote description",o),s.setRemoteDescription(o).then(function(){return r.util.log("Set remoteDescription:",t,"for:",e.peer),void("OFFER"===t&&n.Negotiator._makeAnswer(e))}).catch(function(t){e.provider.emitError("webrtc",t),r.util.log("Failed to setRemoteDescription, ",t)})},n.Negotiator.handleCandidate=function(t,e){var n=e.candidate,o=e.sdpMLineIndex;t.pc.addIceCandidate(new i.RTCIceCandidate({sdpMLineIndex:o,candidate:n})),r.util.log("Added ICE candidate for:",t.peer)}},{"./util":"BHXf","./adapter":"sXtV"}],dbHP:[function(t,e,n){"use strict";n.__esModule=!0;var r=t("./util"),i=t("eventemitter3"),o=t("./negotiator");function s(t,e,n){if(!(this instanceof s))return new s(t,e,n);i.EventEmitter.call(this),this.options=r.util.extend({},n),this.open=!1,this.type="media",this.peer=t,this.provider=e,this.metadata=this.options.metadata,this.localStream=this.options._stream,this.id=this.options.connectionId||s._idPrefix+r.util.randomToken(),this.localStream&&o.Negotiator.startConnection(this,{_stream:this.localStream,originator:!0})}n.MediaConnection=s,r.util.inherits(s,i.EventEmitter),s._idPrefix="mc_",s.prototype.addStream=function(t){r.util.log("Receiving stream",t),this.remoteStream=t,this.emit("stream",t)},s.prototype.handleMessage=function(t){var e=t.payload;switch(t.type){case"ANSWER":o.Negotiator.handleSDP(t.type,this,e.sdp),this.open=!0;break;case"CANDIDATE":o.Negotiator.handleCandidate(this,e.candidate);break;default:r.util.warn("Unrecognized message type:",t.type,"from peer:",this.peer)}},s.prototype.answer=function(t){if(this.localStream)r.util.warn("Local stream already exists on this MediaConnection. Are you answering a call twice?");else{this.options._payload._stream=t,this.localStream=t,o.Negotiator.startConnection(this,this.options._payload);for(var e=this.provider._getMessages(this.id),n=0,i=e.length;n<i;n+=1)this.handleMessage(e[n]);this.open=!0}},s.prototype.close=function(){this.open&&(this.open=!1,o.Negotiator.cleanup(this),this.emit("close"))}},{"./util":"BHXf",eventemitter3:"2JJl","./negotiator":"HCdX"}],T9kO:[function(t,e,n){arguments[3],arguments[3];var r=t("js-binarypack"),i={debug:!1,inherits:function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})},extend:function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},pack:r.pack,unpack:r.unpack,log:function(){if(i.debug){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];t.unshift("Reliable: "),console.log.apply(console,t)}},setZeroTimeout:function(t){var e=[],n="zero-timeout-message";function r(r){r.source==t&&r.data==n&&(r.stopPropagation&&r.stopPropagation(),e.length&&e.shift()())}return t.addEventListener?t.addEventListener("message",r,!0):t.attachEvent&&t.attachEvent("onmessage",r),function(r){e.push(r),t.postMessage(n,"*")}}(this),blobToArrayBuffer:function(t,e){var n=new FileReader;n.onload=function(t){e(t.target.result)},n.readAsArrayBuffer(t)},blobToBinaryString:function(t,e){var n=new FileReader;n.onload=function(t){e(t.target.result)},n.readAsBinaryString(t)},binaryStringToArrayBuffer:function(t){for(var e=new Uint8Array(t.length),n=0;n<t.length;n++)e[n]=255&t.charCodeAt(n);return e.buffer},randomToken:function(){return Math.random().toString(36).substr(2)}};e.exports=i},{"js-binarypack":"lHOc"}],aYFJ:[function(t,e,n){var r=t("./util");function i(t,e){if(!(this instanceof i))return new i(t);this._dc=t,r.debug=e,this._outgoing={},this._incoming={},this._received={},this._window=1e3,this._mtu=500,this._interval=0,this._count=0,this._queue=[],this._setupDC()}i.prototype.send=function(t){var e=r.pack(t);e.size<this._mtu?this._handleSend(["no",e]):(this._outgoing[this._count]={ack:0,chunks:this._chunk(e)},r.debug&&(this._outgoing[this._count].timer=new Date),this._sendWindowedChunks(this._count),this._count+=1)},i.prototype._setupInterval=function(){var t=this;this._timeout=setInterval(function(){var e=t._queue.shift();if(e._multiple)for(var n=0,r=e.length;n<r;n+=1)t._intervalSend(e[n]);else t._intervalSend(e)},this._interval)},i.prototype._intervalSend=function(t){var e=this;t=r.pack(t),r.blobToBinaryString(t,function(t){e._dc.send(t)}),0===e._queue.length&&(clearTimeout(e._timeout),e._timeout=null)},i.prototype._processAcks=function(){for(var t in this._outgoing)this._outgoing.hasOwnProperty(t)&&this._sendWindowedChunks(t)},i.prototype._handleSend=function(t){for(var e=!0,n=0,r=this._queue.length;n<r;n+=1){var i=this._queue[n];i===t?e=!1:i._multiple&&-1!==i.indexOf(t)&&(e=!1)}e&&(this._queue.push(t),this._timeout||this._setupInterval())},i.prototype._setupDC=function(){var t=this;this._dc.onmessage=function(e){var n=e.data;if(n.constructor===String){var i=r.binaryStringToArrayBuffer(n);n=r.unpack(i),t._handleMessage(n)}}},i.prototype._handleMessage=function(t){var e,n=t[1],i=this._incoming[n],o=this._outgoing[n];switch(t[0]){case"no":var s=n;s&&this.onmessage(r.unpack(s));break;case"end":if(e=i,this._received[n]=t[2],!e)break;this._ack(n);break;case"ack":if(e=o){var a=t[2];e.ack=Math.max(a,e.ack),e.ack>=e.chunks.length?(r.log("Time: ",new Date-e.timer),delete this._outgoing[n]):this._processAcks()}break;case"chunk":if(!(e=i)){if(!0===this._received[n])break;e={ack:["ack",n,0],chunks:[]},this._incoming[n]=e}var u=t[2],c=t[3];e.chunks[u]=new Uint8Array(c),u===e.ack[2]&&this._calculateNextAck(n),this._ack(n);break;default:this._handleSend(t)}},i.prototype._chunk=function(t){for(var e=[],n=t.size,i=0;i<n;){var o=Math.min(n,i+this._mtu),s={payload:t.slice(i,o)};e.push(s),i=o}return r.log("Created",e.length,"chunks."),e},i.prototype._ack=function(t){var e=this._incoming[t].ack;this._received[t]===e[2]&&(this._complete(t),this._received[t]=!0),this._handleSend(e)},i.prototype._calculateNextAck=function(t){for(var e=this._incoming[t],n=e.chunks,r=0,i=n.length;r<i;r+=1)if(void 0===n[r])return void(e.ack[2]=r);e.ack[2]=n.length},i.prototype._sendWindowedChunks=function(t){r.log("sendWindowedChunks for: ",t);for(var e=this._outgoing[t],n=e.chunks,i=[],o=Math.min(e.ack+this._window,n.length),s=e.ack;s<o;s+=1)n[s].sent&&s!==e.ack||(n[s].sent=!0,i.push(["chunk",t,s,n[s].payload]));e.ack+this._window>=n.length&&i.push(["end",t,n.length]),i._multiple=!0,this._handleSend(i)},i.prototype._complete=function(t){r.log("Completed called for",t);var e=this,n=this._incoming[t].chunks,i=new Blob(n);r.blobToArrayBuffer(i,function(t){e.onmessage(r.unpack(t))}),delete this._incoming[t]},i.higherBandwidthSDP=function(t){var e=navigator.appVersion.match(/Chrome\/(.*?) /);if(e&&(e=parseInt(e[1].split(".").shift()))<31){var n=t.split("b=AS:30");if(n.length>1)return n[0]+"b=AS:102400"+n[1]}return t},i.prototype.onmessage=function(t){},e.exports.Reliable=i},{"./util":"T9kO"}],GBTQ:[function(t,e,n){"use strict";n.__esModule=!0;var r=t("./util"),i=t("eventemitter3"),o=t("./negotiator"),s=t("reliable");function a(t,e,n){if(!(this instanceof a))return new a(t,e,n);i.EventEmitter.call(this),this.options=r.util.extend({serialization:"binary",reliable:!1},n),this.open=!1,this.type="data",this.peer=t,this.provider=e,this.id=this.options.connectionId||a._idPrefix+r.util.randomToken(),this.label=this.options.label||this.id,this.metadata=this.options.metadata,this.serialization=this.options.serialization,this.reliable=this.options.reliable,this._buffer=[],this._buffering=!1,this.bufferSize=0,this._chunkedData={},this.options._payload&&(this._peerBrowser=this.options._payload.browser),o.Negotiator.startConnection(this,this.options._payload||{originator:!0})}n.DataConnection=a,r.util.inherits(a,i.EventEmitter),a._idPrefix="dc_",a.prototype.initialize=function(t){this._dc=this.dataChannel=t,this._configureDataChannel()},a.prototype._configureDataChannel=function(){var t=this;r.util.supports.sctp&&(this._dc.binaryType="arraybuffer"),this._dc.onopen=function(){r.util.log("Data channel connection success"),t.open=!0,t.emit("open")},!r.util.supports.sctp&&this.reliable&&(this._reliable=new s.Reliable(this._dc,r.util.debug)),this._reliable?this._reliable.onmessage=function(e){t.emit("data",e)}:this._dc.onmessage=function(e){t._handleDataMessage(e)},this._dc.onclose=function(e){r.util.log("DataChannel closed for:",t.peer),t.close()}},a.prototype._handleDataMessage=function(t){var e=this,n=t.data,i=n.constructor;if("binary"===this.serialization||"binary-utf8"===this.serialization){if(i===Blob)return void r.util.blobToArrayBuffer(n,function(t){n=r.util.unpack(t),e.emit("data",n)});if(i===ArrayBuffer)n=r.util.unpack(n);else if(i===String){var o=r.util.binaryStringToArrayBuffer(n);n=r.util.unpack(o)}}else"json"===this.serialization&&(n=JSON.parse(n));if(n.__peerData){var s=n.__peerData,a=this._chunkedData[s]||{data:[],count:0,total:n.total};return a.data[n.n]=n.data,a.count+=1,a.total===a.count&&(delete this._chunkedData[s],n=new Blob(a.data),this._handleDataMessage({data:n})),void(this._chunkedData[s]=a)}this.emit("data",n)},a.prototype.close=function(){this.open&&(this.open=!1,o.Negotiator.cleanup(this),this.emit("close"))},a.prototype.send=function(t,e){if(this.open)if(this._reliable)this._reliable.send(t);else{var n=this;if("json"===this.serialization)this._bufferedSend(JSON.stringify(t));else if("binary"===this.serialization||"binary-utf8"===this.serialization){var i=r.util.pack(t);if((r.util.chunkedBrowsers[this._peerBrowser]||r.util.chunkedBrowsers[r.util.browser])&&!e&&i.size>r.util.chunkedMTU)return void this._sendChunks(i);r.util.supports.sctp?r.util.supports.binaryBlob?this._bufferedSend(i):r.util.blobToArrayBuffer(i,function(t){n._bufferedSend(t)}):r.util.blobToBinaryString(i,function(t){n._bufferedSend(t)})}else this._bufferedSend(t)}else this.emit("error",new Error("Connection is not open. You should listen for the `open` event before sending messages."))},a.prototype._bufferedSend=function(t){!this._buffering&&this._trySend(t)||(this._buffer.push(t),this.bufferSize=this._buffer.length)},a.prototype._trySend=function(t){try{this._dc.send(t)}catch(t){this._buffering=!0;var e=this;return setTimeout(function(){e._buffering=!1,e._tryBuffer()},100),!1}return!0},a.prototype._tryBuffer=function(){if(0!==this._buffer.length){var t=this._buffer[0];this._trySend(t)&&(this._buffer.shift(),this.bufferSize=this._buffer.length,this._tryBuffer())}},a.prototype._sendChunks=function(t){for(var e=r.util.chunk(t),n=0,i=e.length;n<i;n+=1)t=e[n],this.send(t,!0)},a.prototype.handleMessage=function(t){var e=t.payload;switch(t.type){case"ANSWER":this._peerBrowser=e.browser,o.Negotiator.handleSDP(t.type,this,e.sdp);break;case"CANDIDATE":o.Negotiator.handleCandidate(this,e.candidate);break;default:r.util.warn("Unrecognized message type:",t.type,"from peer:",this.peer)}}},{"./util":"BHXf",eventemitter3:"2JJl","./negotiator":"HCdX",reliable:"aYFJ"}],Hxpd:[function(t,e,n){"use strict";n.__esModule=!0;var r=t("./util"),i=t("eventemitter3"),o=t("./socket"),s=t("./mediaconnection"),a=t("./dataconnection");function u(t,e){if(!(this instanceof u))return new u(t,e);i.EventEmitter.call(this),t&&t.constructor==Object?(e=t,t=void 0):t&&(t=t.toString()),(e=r.util.extend({debug:0,host:r.util.CLOUD_HOST,port:r.util.CLOUD_PORT,path:"/",token:r.util.randomToken(),config:r.util.defaultConfig},e)).key="peerjs",this.options=e,"/"===e.host&&(e.host=window.location.hostname),"/"!==e.path[0]&&(e.path="/"+e.path),"/"!==e.path[e.path.length-1]&&(e.path+="/"),void 0===e.secure&&e.host!==r.util.CLOUD_HOST?e.secure=r.util.isSecure():e.host==r.util.CLOUD_HOST&&(e.secure=!0),e.logFunction&&r.util.setLogFunction(e.logFunction),r.util.setLogLevel(e.debug),r.util.supports.audioVideo||r.util.supports.data?r.util.validateId(t)?(this.destroyed=!1,this.disconnected=!1,this.open=!1,this.connections={},this._lostMessages={},this._initializeServerConnection(),t?this._initialize(t):this._retrieveId()):this._delayedAbort("invalid-id",'ID "'+t+'" is invalid'):this._delayedAbort("browser-incompatible","The current browser does not support WebRTC")}n.Peer=u,r.util.inherits(u,i.EventEmitter),u.prototype._initializeServerConnection=function(){var t=this;this.socket=new o.Socket(this.options.secure,this.options.host,this.options.port,this.options.path,this.options.key,this.options.wsport),this.socket.on("message",function(e){t._handleMessage(e)}),this.socket.on("error",function(e){t._abort("socket-error",e)}),this.socket.on("disconnected",function(){t.disconnected||(t.emitError("network","Lost connection to server."),t.disconnect())}),this.socket.on("close",function(){t.disconnected||t._abort("socket-closed","Underlying socket is already closed.")})},u.prototype._retrieveId=function(t){var e=this,n=new XMLHttpRequest,i=(this.options.secure?"https://":"http://")+this.options.host+":"+this.options.port+this.options.path+this.options.key+"/id";i+="?ts="+(new Date).getTime()+Math.random(),n.open("get",i,!0),n.onerror=function(t){r.util.error("Error retrieving ID",t);var n="";"/"===e.options.path&&e.options.host!==r.util.CLOUD_HOST&&(n=" If you passed in a `path` to your self-hosted PeerServer, you'll also need to pass in that same path when creating a new Peer."),e._abort("server-error","Could not get an ID from the server."+n)},n.onreadystatechange=function(){4===n.readyState&&(200===n.status?e._initialize(n.responseText):n.onerror())},n.send(null)},u.prototype._initialize=function(t){this.id=t,this.socket.start(this.id,this.options.token)},u.prototype._handleMessage=function(t){var e,n=t.type,i=t.payload,o=t.src;switch(n){case"OPEN":this.emit("open",this.id),this.open=!0;break;case"ERROR":this._abort("server-error",i.msg);break;case"ID-TAKEN":this._abort("unavailable-id","ID `"+this.id+"` is taken");break;case"INVALID-KEY":this._abort("invalid-key",'API KEY "'+this.options.key+'" is invalid');break;case"LEAVE":r.util.log("Received leave message from",o),this._cleanupPeer(o);break;case"EXPIRE":this.emitError("peer-unavailable","Could not connect to peer "+o);break;case"OFFER":var u=i.connectionId;if((e=this.getConnection(o,u))&&(e.close(),r.util.warn("Offer received for existing Connection ID:",u)),"media"===i.type)e=new s.MediaConnection(o,this,{connectionId:u,_payload:i,metadata:i.metadata}),this._addConnection(o,e),this.emit("call",e);else{if("data"!==i.type)return void r.util.warn("Received malformed connection type:",i.type);e=new a.DataConnection(o,this,{connectionId:u,_payload:i,metadata:i.metadata,label:i.label,serialization:i.serialization,reliable:i.reliable}),this._addConnection(o,e),this.emit("connection",e)}for(var c=this._getMessages(u),h=0,f=c.length;h<f;h+=1)e.handleMessage(c[h]);break;default:if(!i)return void r.util.warn("You received a malformed message from "+o+" of type "+n);var l=i.connectionId;(e=this.getConnection(o,l))&&e.pc?e.handleMessage(t):l?this._storeMessage(l,t):r.util.warn("You received an unrecognized message:",t)}},u.prototype._storeMessage=function(t,e){this._lostMessages[t]||(this._lostMessages[t]=[]),this._lostMessages[t].push(e)},u.prototype._getMessages=function(t){var e=this._lostMessages[t];return e?(delete this._lostMessages[t],e):[]},u.prototype.connect=function(t,e){if(this.disconnected)return r.util.warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect, or call reconnect on this peer if you believe its ID to still be available."),void this.emitError("disconnected","Cannot connect to new Peer after disconnecting from server.");var n=new a.DataConnection(t,this,e);return this._addConnection(t,n),n},u.prototype.call=function(t,e,n){if(this.disconnected)return r.util.warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect."),void this.emitError("disconnected","Cannot connect to new Peer after disconnecting from server.");if(e){(n=n||{})._stream=e;var i=new s.MediaConnection(t,this,n);return this._addConnection(t,i),i}r.util.error("To call a peer, you must provide a stream from your browser's `getUserMedia`.")},u.prototype._addConnection=function(t,e){this.connections[t]||(this.connections[t]=[]),this.connections[t].push(e)},u.prototype.getConnection=function(t,e){var n=this.connections[t];if(!n)return null;for(var r=0,i=n.length;r<i;r++)if(n[r].id===e)return n[r];return null},u.prototype._delayedAbort=function(t,e){var n=this;r.util.setZeroTimeout(function(){n._abort(t,e)})},u.prototype._abort=function(t,e){r.util.error("Aborting!"),this._lastServerId?this.disconnect():this.destroy(),this.emitError(t,e)},u.prototype.emitError=function(t,e){r.util.error("Error:",e),"string"==typeof e&&(e=new Error(e)),e.type=t,this.emit("error",e)},u.prototype.destroy=function(){this.destroyed||(this._cleanup(),this.disconnect(),this.destroyed=!0)},u.prototype._cleanup=function(){if(this.connections)for(var t=Object.keys(this.connections),e=0,n=t.length;e<n;e++)this._cleanupPeer(t[e]);this.emit("close")},u.prototype._cleanupPeer=function(t){for(var e=this.connections[t],n=0,r=e.length;n<r;n+=1)e[n].close()},u.prototype.disconnect=function(){var t=this;r.util.setZeroTimeout(function(){t.disconnected||(t.disconnected=!0,t.open=!1,t.socket&&t.socket.close(),t.emit("disconnected",t.id),t._lastServerId=t.id,t.id=null)})},u.prototype.reconnect=function(){if(this.disconnected&&!this.destroyed)r.util.log("Attempting reconnection to server with ID "+this._lastServerId),this.disconnected=!1,this._initializeServerConnection(),this._initialize(this._lastServerId);else{if(this.destroyed)throw new Error("This peer cannot reconnect to the server. It has already been destroyed.");if(this.disconnected||this.open)throw new Error("Peer "+this.id+" cannot reconnect because it is not disconnected from the server!");r.util.error("In a hurry? We're still trying to make the initial connection!")}},u.prototype.listAllPeers=function(t){t=t||function(){};var e=this,n=new XMLHttpRequest,i=(this.options.secure?"https://":"http://")+this.options.host+":"+this.options.port+this.options.path+this.options.key+"/peers";i+="?ts="+(new Date).getTime()+Math.random(),n.open("get",i,!0),n.onerror=function(n){e._abort("server-error","Could not get peers from the server."),t([])},n.onreadystatechange=function(){if(4===n.readyState){if(401===n.status){var i;throw i=e.options.host!==r.util.CLOUD_HOST?"It looks like you're using the cloud server. You can email team@peerjs.com to enable peer listing for your API key.":"You need to enable `allow_discovery` on your self-hosted PeerServer to use this feature.",t([]),new Error("It doesn't look like you have permission to list peers IDs. "+i)}200!==n.status?t([]):t(JSON.parse(n.responseText))}},n.send(null)}},{"./util":"BHXf",eventemitter3:"2JJl","./socket":"wJlv","./mediaconnection":"dbHP","./dataconnection":"GBTQ"}],iTK6:[function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};n.__esModule=!0;var i=t("./util"),o=t("./adapter"),s=t("./socket"),a=t("./mediaconnection"),u=t("./dataconnection"),c=t("./peer"),h=t("./negotiator"),f=r(t("js-binarypack"));window.Socket=s.Socket,window.MediaConnection=a.MediaConnection,window.DataConnection=u.DataConnection,window.Peer=c.Peer,window.RTCPeerConnection=o.RTCPeerConnection,window.RTCSessionDescription=o.RTCSessionDescription,window.RTCIceCandidate=o.RTCIceCandidate,window.Negotiator=h.Negotiator,window.util=i.util,window.BinaryPack=f.default,n.default=c.Peer},{"./util":"BHXf","./adapter":"sXtV","./socket":"wJlv","./mediaconnection":"dbHP","./dataconnection":"GBTQ","./peer":"Hxpd","./negotiator":"HCdX","js-binarypack":"lHOc"}]},{},["iTK6"])},function(t,e){function n(t){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}n.keys=function(){return[]},n.resolve=n,t.exports=n,n.id=1},function(t,e,n){"use strict";(function(t){n.d(e,"a",function(){return i});var r=new(n(0).default),i=function(){function e(){}return e.open_socket=function(){r.on("open",function(t){console.log("My peer id is: "+t),e.mapping[t]=e.index,e.index++}),r.on("connection",e.connection_opened)},e.connection_opened=function(n){console.log((n.reliable?"Reliable":"Unreliable")+" Connection opened with "+n.peer);var r=e.mapping[n.peer];void 0===r&&(r=e.index,e.mapping[n.peer]=r,e.buffers.push(new t(n.peer)),e.reliable_connections.push(null),e.unreliable_connections.push(null),e.index++),n.reliable?(e.reliable_connections[r]=n,n.on("open",function(){n.on("data",e.receive_reliable),n.send({others:e.reliable_connections.slice(0,-1).map(function(t){return t.peer})})})):(e.unreliable_connections[r]=n,n.on("open",function(){n.on("data",e.receive_unreliable)}))},e.full_connect=function(t){console.log("Making a connection with "+t),void 0===e.mapping[t]?(e.mapping[t]=e.index,e.index++,e.open_unreliable(t),e.open_reliable(t),console.log("Connection made with "+t)):console.log("Network connection with "+t+" already opened")},e.open_reliable=function(t){var n=r.connect(t,{reliable:!0});n.on("open",function(){e.reliable_connections.push(n),n.on("data",e.receive_reliable)})},e.open_unreliable=function(t){var n=r.connect(t,{reliable:!1});n.on("open",function(){e.unreliable_connections.push(n),n.on("data",e.receive_unreliable)}),setTimeout(function(){var n=e.mapping[t];void 0===e.unreliable_connections[n]&&e.open_unreliable(t)},1e3)},e.receive_reliable=function(t){if(void 0!==t.others)for(var n=0,r=t.others;n<r.length;n++){var i=r[n];e.full_connect(i)}},e.receive_unreliable=function(t){},e.send_all_reliable=function(t){for(var n=0,r=Object.values(e.reliable_connections);n<r.length;n++){r[n].send(t)}},e.wait_for_buffers=function(){},e.BUFFER_SIZE=8,e.index=0,e.mapping={},e.buffers=[],e.reliable_connections=[],e.unreliable_connections=[],e}()}).call(this,n(4).Buffer)},function(t,e,n){"use strict";n.r(e);var r=n(2);console.log("Starting up"),r.a.open_socket(),document.getElementById("connect-button").addEventListener("click",function(){var t=document.getElementById("textbox");r.a.full_connect(t.value),document.getElementById("send-button").addEventListener("click",function(){r.a.send_all_reliable("start")})})},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(6),i=n(7),o=n(8);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=l(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(e,n),i=(t=a(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|p(e.length);return 0===(t=a(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?a(t,0):l(t,e);if("Buffer"===e.type&&o(e.data))return l(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(h(e),t=a(t,e<0?0:0|p(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function l(t,e){var n=e.length<0?0:0|p(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function p(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return z(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return F(t).length;default:if(r)return z(t).length;e=(""+e).toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function _(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:y(t,e,n,r,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):y(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function y(t,e,n,r,i){var o,s=1,a=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,n/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var h=-1;for(o=n;o<a;o++)if(c(t,o)===c(e,-1===h?0:o-h)){if(-1===h&&(h=o),o-h+1===u)return h*s}else-1!==h&&(o-=o-h),h=-1}else for(n+u>a&&(n=a-u),o=n;o>=0;o--){for(var f=!0,l=0;l<u;l++)if(c(t,o+l)!==c(e,l)){f=!1;break}if(f)return o}return-1}function v(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[n+s]=a}return s}function b(t,e,n,r){return j(z(e,t.length-n),t,n,r)}function w(t,e,n,r){return j(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function m(t,e,n,r){return w(t,e,n,r)}function k(t,e,n,r){return j(F(e),t,n,r)}function B(t,e,n,r){return j(function(t,e){for(var n,r,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function E(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function S(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,s,a,u,c=t[i],h=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=n)switch(f){case 1:c<128&&(h=c);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&c)<<6|63&o)>127&&(h=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&c)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(h=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(h=u)}null===h?(h=65533,f=1):h>65535&&(h-=65536,r.push(h>>>10&1023|55296),h=56320|1023&h),r.push(h),i+=f}return function(t){var e=t.length;if(e<=C)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=C));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return c(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return h(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return f(null,t)},u.allocUnsafeSlow=function(t){return f(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var s=t[n];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,i),i+=s.length}return r},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?S(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return R(this,e,n);case"utf8":case"utf-8":return S(this,e,n);case"ascii":return A(this,e,n);case"latin1":case"binary":return T(this,e,n);case"base64":return E(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(r>>>=0),s=(n>>>=0)-(e>>>=0),a=Math.min(o,s),c=this.slice(r,i),h=t.slice(e,n),f=0;f<a;++f)if(c[f]!==h[f]){o=c[f],s=h[f];break}return o<s?-1:s<o?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return _(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return _(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return v(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return w(this,t,e,n);case"latin1":case"binary":return m(this,t,e,n);case"base64":return k(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var C=4096;function A(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function T(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function R(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=Y(t[o]);return i}function P(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function M(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function x(t,e,n,r,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function I(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function D(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function O(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function U(t,e,n,r,o){return o||O(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function L(t,e,n,r,o){return o||O(t,0,n,8),i.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||M(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||M(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},u.prototype.readUInt8=function(t,e){return e||M(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||M(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||M(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||M(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||M(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||M(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||M(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||M(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||M(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||M(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||M(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||M(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||M(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||M(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||M(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||M(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||x(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||x(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):I(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):I(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):D(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):D(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);x(this,t,e,n,i-1,-i)}var o=0,s=1,a=0;for(this[e]=255&t;++o<n&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);x(this,t,e,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):I(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):I(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):D(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):D(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return U(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return U(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return L(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return L(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var s=u.isBuffer(t)?t:z(new u(t,r).toString()),a=s.length;for(o=0;o<n-e;++o)this[o+e]=s[o%a]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function Y(t){return t<16?"0"+t.toString(16):t.toString(16)}function z(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function F(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(N,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function j(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(5))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=c(t),r=n[0],s=n[1],a=new o(function(t,e,n){return 3*(e+n)/4-n}(0,r,s)),u=0,h=s>0?r-4:r,f=0;f<h;f+=4)e=i[t.charCodeAt(f)]<<18|i[t.charCodeAt(f+1)]<<12|i[t.charCodeAt(f+2)]<<6|i[t.charCodeAt(f+3)],a[u++]=e>>16&255,a[u++]=e>>8&255,a[u++]=255&e;2===s&&(e=i[t.charCodeAt(f)]<<2|i[t.charCodeAt(f+1)]>>4,a[u++]=255&e);1===s&&(e=i[t.charCodeAt(f)]<<10|i[t.charCodeAt(f+1)]<<4|i[t.charCodeAt(f+2)]>>2,a[u++]=e>>8&255,a[u++]=255&e);return a},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],s=0,a=n-i;s<a;s+=16383)o.push(h(t,s,s+16383>a?a:s+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)r[a]=s[a],i[s.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function h(t,e,n){for(var i,o,s=[],a=e;a<n;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,s,a=8*i-r-1,u=(1<<a)-1,c=u>>1,h=-7,f=n?i-1:0,l=n?-1:1,p=t[e+f];for(f+=l,o=p&(1<<-h)-1,p>>=-h,h+=a;h>0;o=256*o+t[e+f],f+=l,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=r;h>0;s=256*s+t[e+f],f+=l,h-=8);if(0===o)o=1-c;else{if(o===u)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,r),o-=c}return(p?-1:1)*s*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var s,a,u,c=8*o-i-1,h=(1<<c)-1,f=h>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:o-1,d=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+f>=1?l/u:l*Math.pow(2,1-f))*u>=2&&(s++,u/=2),s+f>=h?(a=0,s=h):s+f>=1?(a=(e*u-1)*Math.pow(2,i),s+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,i),s=0));i>=8;t[n+p]=255&a,p+=d,a/=256,i-=8);for(s=s<<i|a,c+=i;c>0;t[n+p]=255&s,p+=d,s/=256,c-=8);t[n+p-d]|=128*g}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,